UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {  
        if(node==NULL)  
        {  
            return NULL;  
        }  
        map<int, UndirectedGraphNode*> nodes;  
        queue<UndirectedGraphNode*> q;  
          
        q.push(node);  
          
        while(!q.empty())  
        {  
            UndirectedGraphNode* tmp = q.front();  
            q.pop();  
            if(nodes.find(tmp->label)==nodes.end())  
            {  
                UndirectedGraphNode* new_node = new UndirectedGraphNode(tmp->label);  
                nodes.insert(pair<int, UndirectedGraphNode*>(new_node->label, new_node));  
                for(int i=0;i<tmp->neighbors.size();i++)  
                {  
                    q.push(tmp->neighbors[i]);  
                }  
            }  
        }  
          
        q.push(node);  
        while(!q.empty())  
        {  
            UndirectedGraphNode* tmp = q.front();  
            q.pop();  
            UndirectedGraphNode* existingnode = nodes[tmp->label];  
            if(existingnode->neighbors.empty()&&!tmp->neighbors.empty())  
            {  
                for(int i=0;i<tmp->neighbors.size();i++)  
                {  
                    existingnode->neighbors.push_back(nodes[tmp->neighbors[i]->label]);  
                    q.push(tmp->neighbors[i]);  
                }  
            }  
        }  
          
        return nodes[node->label];  
    } 