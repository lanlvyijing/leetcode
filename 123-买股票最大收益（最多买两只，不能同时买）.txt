int maxProfit(vector<int>& prices) {
        if (prices.size() < 2) return 0;
        
        int n = prices.size();
        vector<int>preProfit(n,0);
        vector<int>postProfit(n,0);
        
        int curMin = prices[0];
        for (int i = 1; i < n; i++) {
            curMin = min(curMin, prices[i]);
            preProfit[i] = max(preProfit[i - 1], prices[i] - curMin);
        }
        
        int curMax = prices[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            curMax = max(curMax, prices[i]);
            postProfit[i] = max(postProfit[i + 1], curMax - prices[i]);
        }
        
        int maxProfit = 0;
        for (int i = 0; i < n; i++) {
            maxProfit = max(maxProfit, preProfit[i] + postProfit[i]);
        }
        
        return  maxProfit;
    }