
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
#define max_people 100000
int pre[max_people*3];
int ai_vec[max_people+1];

int find_root(int x)   //查找根节点
{
    int r=x;
    while ( pre[r ] != r )//返回根节点 r
          r=pre[r ];

    int i=x , j ;
    while( i != r )    //路径压缩
    {
         j = pre[ i ]; // 在改变上级之前用临时变量  j 记录下他的值
         pre[ i ]= r ; //把上级改为根节点1
         i=j;
    }
    return r ;
}
void join(int x,int y)  //判断x y是否连通，如果已经连通，就不用管了 //如果不连通，就把它们所在的连通分支合并起,
{
    int fx=find_root(x),fy=find_root(y);
    if(fx!=fy)
        pre[fx ]=fy;
}


int main()
{
    int n;
    cin>>n;
        bool res_final=0;
        int ai,t;

        for(int i=1;i<=2*max_people;i++)
        {
            pre[i]=i;
        }
        for(int i=1;i<=n;i++)
        {
            cin>>ai>>t;
            ai_vec[i] = ai;
            if(t==1)
            {
                join(i,ai);
                join(i+max_people,ai+max_people);
            }
            else
            {
                join(i,ai+max_people);
                join(i+max_people,ai);
            }
        }
        for(int i=1;i<=n;i++)
        {
            if(find_root(i)==find_root(max_people+i))
            {
                res_final=1;
                break;
            }
        }

        if(res_final)
            cout<<"One face meng bi"<<endl;
        else
            cout<<"Time to show my power"<<endl;

    return 0;
}
